        -:    0:Source:rainhas.cpp
        -:    1:#include "rainhas.h"
        -:    2:#include <cmath>
        -:    3:
function _Z19pode_colocar_rainhaPA8_cii called 0 returned 0% blocks executed 0%
    #####:    4:bool pode_colocar_rainha(char tabuleiro[8][8], int linha, int coluna) {
    #####:    5:    for (int i = 0; i < 8; ++i) {
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:    6:        if (tabuleiro[linha][i] == '1') {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:    7:            return false;
        -:    8:        }
        -:    9:    }
        -:   10:
    #####:   11:    for (int i = 0; i < 8; ++i) {
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:   12:        if (tabuleiro[i][coluna] == '1') {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   13:            return false;
        -:   14:        }
        -:   15:    }
        -:   16:
    #####:   17:    for (int i = linha, j = coluna; i >= 0 && j >= 0; --i, --j) {
branch  0 never executed (fallthrough)
branch  1 never executed
branch  2 never executed
branch  3 never executed (fallthrough)
    #####:   18:        if (tabuleiro[i][j] == '1') {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   19:            return false;
        -:   20:        }
        -:   21:    }
        -:   22:
    #####:   23:    for (int i = linha, j = coluna; i >= 0 && j < 8; --i, ++j) {
branch  0 never executed (fallthrough)
branch  1 never executed
branch  2 never executed
branch  3 never executed (fallthrough)
    #####:   24:        if (tabuleiro[i][j] == '1') {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   25:            return false;
        -:   26:        }
        -:   27:    }
        -:   28:
    #####:   29:    return true;
        -:   30:}
        -:   31:
function _Z19verificar_tabuleiroPA8_c called 1 returned 100% blocks executed 89%
        1:   32:int verificar_tabuleiro(char tabuleiro[8][8]) {
        1:   33:    int num_rainhas = 0;
        -:   34:
        9:   35:    for (int i = 0; i < 8; ++i) {
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
       72:   36:        for (int j = 0; j < 8; ++j) {
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
       64:   37:            if (tabuleiro[i][j] != '0' && tabuleiro[i][j] != '1') {
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   38:                return -1; // Entrada inválida
        -:   39:            }
       64:   40:            if (tabuleiro[i][j] == '1') {
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
        8:   41:                ++num_rainhas;
        -:   42:                // Verifica se a rainha está atacando outra rainha
       72:   43:                for (int k = 0; k < 8; ++k) {
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
       64:   44:                    if ((k != j && tabuleiro[i][k] == '1') || // Ataque na mesma linha
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 88% (fallthrough)
branch  5 taken 12%
       56:   45:                        (k != i && tabuleiro[k][j] == '1')) { // Ataque na mesma coluna
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   46:                        return 0;
        -:   47:                    }
        -:   48:                }
       64:   49:                for (int k = 1; k < 8; ++k) {
branch  0 taken 88%
branch  1 taken 12% (fallthrough)
       56:   50:                    if ((i+k < 8 && j+k < 8 && tabuleiro[i+k][j+k] == '1') || // Ataque na diagonal principal
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 61% (fallthrough)
branch  3 taken 39%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
       56:   51:                        (i-k >= 0 && j-k >= 0 && tabuleiro[i-k][j-k] == '1') || // Ataque na diagonal principal
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 61% (fallthrough)
branch  3 taken 39%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
       56:   52:                        (i+k < 8 && j-k >= 0 && tabuleiro[i+k][j-k] == '1') || // Ataque na diagonal secundária
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 64% (fallthrough)
branch  3 taken 36%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
       56:   53:                        (i-k >= 0 && j+k < 8 && tabuleiro[i-k][j+k] == '1')) { // Ataque na diagonal secundária
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 64% (fallthrough)
branch  3 taken 36%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####:   54:                        return 0;
        -:   55:                    }
        -:   56:                }
        -:   57:            }
        -:   58:        }
        -:   59:    }
        -:   60:
        1:   61:    if (num_rainhas != 8) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   62:        return -1; // Não há exatamente 8 rainhas
        -:   63:    }
        -:   64:
        1:   65:    return 1; // É uma solução válida
        -:   66:}
